package ie.stephen.service;

import ie.stephen.dao.AccountDao;
import ie.stephen.model.Account;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AccountServiceImplementation implements AccountService {

    @Autowired
    AccountDao accountDao;

    public void createAccount(int customerId, double overdraftLimit) {
        try {
            int generatedId = accountDao.newAccount(overdraftLimit);
            accountDao.newCustomerAccount(customerId, generatedId);
            System.out.println("Account with id " + generatedId + " created. Overdraft limit: €" + overdraftLimit);
        }
        catch (NullPointerException ex) {
            System.out.println("ERROR: Failed to find autogenerated account id");
        }
    }

    public void addPersonToAccount(int accountId, int customerId) {
        try {
            accountDao.findAccount(accountId);
        }
        catch (EmptyResultDataAccessException ex) {
            System.out.println("Account not found");
            return;
        }
        try {
            accountDao.newCustomerAccount(customerId, accountId);
        } catch (DuplicateKeyException ex) {
            System.out.println("Customer is already an owner of that account");
        }
    }

    public void viewAccounts(int customerId) {
        List<Account> accounts = accountDao.findAccounts(customerId);
        for (Account account : accounts) {
            System.out.println("\t" + account.toString());
        }
    }

    public void withdraw(int accountId, double amount) {
        try {
            Account account = accountDao.findAccount(accountId);
            if (account.getBalance() < (amount - account.getOverdraftLimit())) {
                System.out.println("Insufficient funds");
            }
            else {
                account.setBalance(account.getBalance() - amount);
                accountDao.updateBalance(account);
                System.out.println("Give customer €" + amount);
            }
        }
        catch (EmptyResultDataAccessException ex) {
            System.out.println("Account not found");
        }
    }

    public void deposit(int accountId, double amount) {
        try {
            Account account = accountDao.findAccount(accountId);
            account.setBalance(account.getBalance() + amount);
            accountDao.updateBalance(account);
            System.out.println("Deposited €" + amount);
        }
        catch (EmptyResultDataAccessException ex) {
            System.out.println("Account not found. Returning money");
        }
    }

    public void transfer(int account1Id, int account2Id, double amount) {
        try {
            Account account1 = accountDao.findAccount(account1Id);
            if (account1.getBalance() < (amount - account1.getOverdraftLimit())) {
                System.out.println("Insufficient funds");
            }
            else {
                try {
                    Account account2 = accountDao.findAccount(account2Id);
                    account1.setBalance(account1.getBalance() - amount);
                    account2.setBalance(account2.getBalance() + amount);
                    accountDao.updateBalance(account1);
                    accountDao.updateBalance(account2);
                    System.out.println("Transferred €" + amount);
                }
                catch (EmptyResultDataAccessException ex) {
                    System.out.println("Account to transfer to not found. Returning money");
                }
            }
        }
        catch (EmptyResultDataAccessException ex) {
            System.out.println("Customer account not found. Returning money");
        }
    }

    public void closeAccount(int accountId) {
        accountDao.deleteCustomerAccount(accountId);
        int numDeletes = accountDao.deleteAccount(accountId);
        if (numDeletes == 0) {
            System.out.println("Couldn't find an account with id " + accountId);
        }
        else {
            System.out.println("Account " + accountId + " closed");
        }
    }

    public void totalDeposited() {
        double total = accountDao.totalDeposited();
        System.out.println("Total Deposited: €" + total);
    }

    public void numAboveLimit(int limit) {
        int count = accountDao.numAboveLimit(limit);
        System.out.println("Num accounts above €" + limit + ": " + count);
    }
}
